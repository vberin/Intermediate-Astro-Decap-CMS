---
// src/pages/admin/generator.astro
import BaseLayout from "@layouts/BaseLayout.astro";
---
<BaseLayout title="AI Article Generator" description="Generate a new blog post using AI">
    <main class="generator-container">
        <h1>AI-Генератор Статей для Блога</h1>
        <p>Введите тему или ключевые слова, и AI напишет для вас черновик статьи в формате Markdown.</p>

        <div id="generator-form">
            <textarea id="prompt-input" placeholder="Например: 'преимущества керамической плитки для ванной в стиле лофт'"></textarea>
            <button id="generate-button">Сгенерировать статью</button>
            <div id="loading-indicator" style="display: none;">
                <div class="spinner"></div>
                <span>Генерация... Это может занять до 30 секунд.</span>
            </div>
        </div>

        <div id="result-container" style="display: none;">
            <h2>Ваша статья готова!</h2>
            <p>Скопируйте текст ниже и вставьте его в поле "Body" при создании новой записи в блоге.</p>
            <pre id="result-output"></pre>
            <button id="copy-button">Копировать Markdown</button>
        </div>
    </main>
</BaseLayout>

<script>
    // Клиентский скрипт для вызова нашей serverless-функции
    document.addEventListener('astro:page-load', () => {
        const generateButton = document.getElementById('generate-button');
        const promptInput = document.getElementById('prompt-input');
        const loadingIndicator = document.getElementById('loading-indicator');
        const resultContainer = document.getElementById('result-container');
        const resultOutput = document.getElementById('result-output');
        const copyButton = document.getElementById('copy-button');

        generateButton.addEventListener('click', async () => {
            const prompt = promptInput.value;
            if (!prompt.trim()) {
                alert('Пожалуйста, введите тему для статьи.');
                return;
            }

            // Показываем индикатор загрузки и скрываем кнопку
            loadingIndicator.style.display = 'flex';
            generateButton.style.display = 'none';
            resultContainer.style.display = 'none';

            try {
                // Вызываем нашу serverless-функцию
                const response = await fetch('/.netlify/functions/generate-article', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt: prompt })
                });

                if (!response.ok) {
                    throw new Error(`Ошибка сервера: ${response.statusText}`);
                }

                const data = await response.json();
                
                // В данном случае, так как функция уже создает файл в репозитории,
                // мы просто покажем сообщение об успехе.
                
                resultOutput.textContent = `Статья "${data.message.match(/"(.*?)"/)[1]}" успешно создана и добавлена в репозиторий! Обновите страницу админ-панели, чтобы увидеть ее в списке блога.`;
                resultContainer.style.display = 'block';
                copyButton.style.display = 'none'; // Кнопка копирования не нужна

            } catch (error) {
                console.error('Ошибка при генерации статьи:', error);
                resultOutput.textContent = `Произошла ошибка: ${error.message}. Попробуйте еще раз.`;
                resultContainer.style.display = 'block';
            } finally {
                // Скрываем индикатор загрузки и снова показываем кнопку
                loadingIndicator.style.display = 'none';
                generateButton.style.display = 'block';
            }
        });

        copyButton.addEventListener('click', () => {
            navigator.clipboard.writeText(resultOutput.textContent)
                .then(() => {
                    alert('Текст скопирован в буфер обмена!');
                })
                .catch(err => {
                    console.error('Не удалось скопировать текст: ', err);
                });
        });
    });
</script>

<style lang="less">
.generator-container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    padding-top: 10rem; /* ИСПРАВЛЕНИЕ: Добавлен верхний отступ для компенсации высоты шапки */
    text-align: center;
}
h1 {
    margin-bottom: 1rem;
}
p {
    margin-bottom: 2rem;
    color: var(--bodyTextColor);
}
#generator-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}
#prompt-input {
    width: 100%;
    min-height: 100px;
    padding: 0.75rem;
    font-size: 1rem;
    border-radius: 8px;
    border: 1px solid #ccc;
}
#generate-button, #copy-button {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: bold;
    color: #fff;
    background-color: var(--primary);
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.3s;
    &:hover {
        opacity: 0.9;
    }
}
#loading-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    font-size: 1rem;
    color: var(--bodyTextColor);
    .spinner {
        width: 24px;
        height: 24px;
        border: 3px solid rgba(0,0,0,0.1);
        border-left-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
}
#result-container {
    margin-top: 2rem;
    text-align: left;
    h2 {
        text-align: center;
        margin-bottom: 1rem;
    }
    pre {
        background-color: #f7f7f7;
        padding: 1rem;
        border-radius: 8px;
        white-space: pre-wrap;
        word-wrap: break-word;
        max-height: 400px;
        overflow-y: auto;
    }
    #copy-button {
        margin-top: 1rem;
    }
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

body.dark-mode {
    p, #loading-indicator span {
        color: var(--bodyTextColorWhite);
    }
    #prompt-input, pre {
        background-color: var(--accent);
        border-color: var(--medium);
        color: var(--bodyTextColorWhite);
    }
}
</style>

---
// src/components/ChatWidget.astro
import { Icon } from "astro-icon/components";
---

<div id="chat-widget-container">
    <!-- Кнопка, которая открывает чат -->
    <button id="chat-toggle-button" aria-label="Открыть чат">
        <Icon name="mdi:chat-processing-outline" />
    </button>

    <!-- Окно чата, изначально скрыто -->
    <div id="chat-window" class="hidden">
        <div class="chat-header">
            <h3>AI-Консультант</h3>
            <button id="chat-close-button" aria-label="Закрыть чат">&times;</button>
        </div>
        <div id="chat-messages">
            <!-- Начальное приветственное сообщение от AI -->
            <div class="message ai-message">
                <p>Здравствуйте! Я AI-консультант. Чем могу помочь?</p>
            </div>
        </div>
        <div id="chat-input-container">
            <form id="chat-form">
                <input type="text" id="chat-input" placeholder="Спросите что-нибудь..." autocomplete="off">
                <button type="submit" aria-label="Отправить">
                    <Icon name="mdi:send" />
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('astro:page-load', () => {
        const chatWindow = document.getElementById('chat-window');
        const toggleButton = document.getElementById('chat-toggle-button');
        const closeButton = document.getElementById('chat-close-button');
        const chatForm = document.getElementById('chat-form');
        const chatInput = document.getElementById('chat-input');
        const messagesContainer = document.getElementById('chat-messages');

        // Открыть/закрыть чат
        toggleButton.addEventListener('click', () => {
            chatWindow.classList.toggle('hidden');
            toggleButton.classList.toggle('hidden');
        });

        closeButton.addEventListener('click', () => {
            chatWindow.classList.add('hidden');
            toggleButton.classList.remove('hidden');
        });

        // Отправка сообщения
        chatForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userQuestion = chatInput.value.trim();
            if (!userQuestion) return;

            // Отображаем вопрос пользователя
            addMessage(userQuestion, 'user');
            chatInput.value = '';

            // Показываем индикатор загрузки
            showLoadingIndicator();

            try {
                const response = await fetch('/.netlify/functions/ask-ai-consultant', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ question: userQuestion })
                });

                removeLoadingIndicator();

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Произошла ошибка на сервере.');
                }

                const data = await response.json();
                addMessage(data.answer, 'ai');

            } catch (error) {
                console.error('Chat error:', error);
                removeLoadingIndicator();
                addMessage(`Извините, произошла ошибка: ${error.message}`, 'ai');
            }
        });

        // Функция для добавления сообщения в чат
        function addMessage(text, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', `${sender}-message`);
            
            const p = document.createElement('p');
            p.textContent = text;
            messageElement.appendChild(p);
            
            messagesContainer.appendChild(messageElement);
            scrollToBottom();
        }

        // Индикатор загрузки
        function showLoadingIndicator() {
            const loadingElement = document.createElement('div');
            loadingElement.id = 'loading-indicator';
            loadingElement.classList.add('message', 'ai-message');
            loadingElement.innerHTML = `<div class="typing-dots"><span></span><span></span><span></span></div>`;
            messagesContainer.appendChild(loadingElement);
            scrollToBottom();
        }

        function removeLoadingIndicator() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) {
                indicator.remove();
            }
        }

        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    });
</script>

<style lang="less">
#chat-widget-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
}

#chat-toggle-button {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--primary);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 2rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    transition: transform 0.2s, background-color 0.2s;

    &:hover {
        transform: scale(1.1);
        background-color: var(--primaryLight);
    }
    &.hidden {
        display: none;
    }
}

#chat-window {
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: opacity 0.3s, transform 0.3s;
    transform-origin: bottom right;

    &.hidden {
        transform: scale(0);
        opacity: 0;
    }
}

.chat-header {
    background: var(--primary);
    color: white;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;

    h3 {
        margin: 0;
        font-size: 1.1rem;
    }

    #chat-close-button {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
    }
}

#chat-messages {
    flex-grow: 1;
    padding: 15px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 10px;

    .message {
        max-width: 80%;
        padding: 10px 15px;
        border-radius: 20px;
        line-height: 1.4;

        p { margin: 0; }
    }

    .ai-message {
        background: #f1f1f1;
        color: #333;
        align-self: flex-start;
        border-bottom-left-radius: 5px;
    }

    .user-message {
        background: var(--primary);
        color: white;
        align-self: flex-end;
        border-bottom-right-radius: 5px;
    }
}

#chat-input-container {
    border-top: 1px solid #eee;
    padding: 10px;

    #chat-form {
        display: flex;
        gap: 10px;

        input {
            flex-grow: 1;
            border: 1px solid #ddd;
            border-radius: 20px;
            padding: 10px 15px;
            font-size: 1rem;
            &:focus {
                outline: none;
                border-color: var(--primary);
            }
        }
        button {
            background: var(--primary);
            border: none;
            color: white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            flex-shrink: 0;
        }
    }
}

/* Анимация точек для индикатора загрузки */
.typing-dots span {
    height: 8px;
    width: 8px;
    background-color: #ccc;
    border-radius: 50%;
    display: inline-block;
    animation: typing 1.4s infinite;
}
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1.0); }
}

/* Dark Mode */
body.dark-mode & {
    #chat-window {
        background: var(--dark);
    }
    #chat-messages .ai-message {
        background: var(--accent);
        color: var(--bodyTextColorWhite);
    }
    #chat-input-container {
        border-top-color: var(--accent);
        input {
            background: var(--medium);
            border-color: var(--accent);
            color: var(--bodyTextColorWhite);
        }
    }
}

</style>
